{"remainingRequest":"/Users/lauchach/Desktop/CPE492webEdit/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/lauchach/Desktop/CPE492webEdit/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/lauchach/Desktop/CPE492webEdit/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lauchach/Desktop/CPE492webEdit/src/views/website2.vue?vue&type=template&id=447dc4de&","dependencies":[{"path":"/Users/lauchach/Desktop/CPE492webEdit/src/views/website2.vue","mtime":1646002928868},{"path":"/Users/lauchach/Desktop/CPE492webEdit/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lauchach/Desktop/CPE492webEdit/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/lauchach/Desktop/CPE492webEdit/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lauchach/Desktop/CPE492webEdit/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}